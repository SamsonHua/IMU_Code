//===============================
// Antcelerometer V1.1
// Another random intern project
// Made by Samson H
// Severely helped by Conrad B
//===============================

//Dependencies
#include <Arduino.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include "SPI.h"
#include "SD.h"
#include "Wire.h"

//Object declarations
Adafruit_MPU6050 mpu;
Adafruit_SSD1306 display = Adafruit_SSD1306(128, 64, &Wire);
File dataFile;

//Pin declarations
const int leftSwitch = D3;
const int rightSwitch = D4;
const int chipSelect = D8;  // used for ESP8266

//Calibration constants
float xScale = 1;
float yScale = 1/1.005;
float zScale = 1/1.02;

//Logic Booleans
bool switch_pos = false;

//Variable holders
float ax_raw, ay_raw, az_raw;
float alpha = 0.99;
float cal_ax,cal_ay,cal_az = 0;

//Timing variables
long unsigned int t;
long unsigned int t0;

//Logging variables
float long_ax[10000];
float long_ay[10000];
float long_az[10000];
float long_t[10000];

int index_num = 0;

//Sensor Object
sensors_event_t a, g, temp;

//Cheeky Loading Screen
const unsigned char loadingScreen [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe1, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf1, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf1, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf9, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xe3, 0x07, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x9f, 0xff, 0xff, 0xfe, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xcf, 0xff, 0xff, 0xf8, 0x7f, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xf7, 0xff, 0xff, 0xc3, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf1, 0xff, 0xff, 0x0f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfc, 0x00, 0x00, 0x7f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xf9, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xc3, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xff, 0xf0, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x81, 0xff, 0xf0, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x81, 0xff, 0xe0, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xc3, 0xff, 0xe0, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xe7, 0xff, 0xf0, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xc7, 0xfb, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xc7, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xcf, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0x03, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xfe, 0x03, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0x80, 0xfe, 0x01, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xb1, 0xff, 0x1c, 0xfe, 0x01, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0x3e, 0xfe, 0x03, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0x3e, 0xff, 0x07, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0x9e, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x87, 0xc3, 0xe7, 0xe3, 0x03, 0xc0, 0xfc, 0x3c, 0x02, 0x38, 0xf3, 0xf0, 0xff, 0xff, 
	0xff, 0xff, 0x01, 0xc1, 0xc3, 0xe3, 0x00, 0xc0, 0x7c, 0x1c, 0x02, 0x30, 0x71, 0xc0, 0x7f, 0xff, 
	0xff, 0xfe, 0x03, 0xc1, 0xc3, 0xe3, 0x00, 0xc0, 0x3c, 0x1c, 0x02, 0x30, 0x31, 0x80, 0x7f, 0xff, 
	0xff, 0xfc, 0x3f, 0x81, 0xc3, 0xe3, 0x18, 0xc6, 0x38, 0x1f, 0x0e, 0x30, 0x31, 0x8f, 0xff, 0xff, 
	0xff, 0xfc, 0x3f, 0x88, 0xc3, 0xe3, 0x00, 0xc6, 0x38, 0x8f, 0x0e, 0x30, 0x11, 0x0f, 0xff, 0xff, 
	0xff, 0xfc, 0x7f, 0x88, 0xc3, 0xe3, 0x01, 0xc0, 0x38, 0x8f, 0x0e, 0x31, 0x11, 0x08, 0x3f, 0xff, 
	0xff, 0xfc, 0x7f, 0x00, 0xc3, 0xe3, 0x00, 0xc0, 0x70, 0x0f, 0x0e, 0x31, 0x01, 0x08, 0x3f, 0xff, 
	0xff, 0xfc, 0x3f, 0x00, 0x43, 0xe3, 0x18, 0x40, 0x70, 0x07, 0x0e, 0x31, 0x81, 0x0e, 0x3f, 0xff, 
	0xff, 0xfe, 0x13, 0x00, 0x40, 0x63, 0x08, 0x44, 0x30, 0x07, 0x0e, 0x31, 0x81, 0x84, 0x3f, 0xff, 
	0xff, 0xfe, 0x02, 0x1c, 0x40, 0x23, 0x00, 0xc6, 0x01, 0xc7, 0x0e, 0x31, 0xc1, 0x80, 0x3f, 0xff, 
	0xff, 0xff, 0x02, 0x3c, 0x00, 0x23, 0x01, 0xc7, 0x03, 0xc3, 0x0e, 0x31, 0xc1, 0xc0, 0x3f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {

  //Begin serial port and set sample speed
  Serial.begin(115200);
  
  //Enable pull up resistors for switches
  pinMode(leftSwitch, INPUT_PULLUP);
  pinMode(rightSwitch, INPUT_PULLUP);

  //Attempt to connect OLED over I2C
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x64
    Serial.println(F("SSD1306 not found"));
    for (;;)
      ; // Don't proceed, loop forever
  }

  //Attempt to connect to MCU over I2C
  if (!mpu.begin()) {
    while (1)
      yield();
  }

  //Attempt to connect to SD card
  if (!SD.begin(chipSelect)) {
    Serial.println("Initialization failed!");
    while (1);
  }

  //Set I2C bus speed to 400KHz
  Wire.setClock(400000L);

  //Turn on OLED and display calibrating screens
  display.clearDisplay();
  display.drawBitmap(0, 0, loadingScreen, 128, 64, 1);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setRotation(0);
  display.setCursor(0,10);
  display.display();

  delay(3000);
  
  //Begin calibration sequence
  for(int i = 0; i < 100; i++){
    mpu.getEvent(&a,&g,&temp);
    ax_raw = a.acceleration.x * xScale;
    ay_raw = a.acceleration.y * yScale;
    az_raw = a.acceleration.z * zScale;

    cal_ax += ax_raw;
    cal_ay += ay_raw;
    cal_az += az_raw;
  }
  //Take average of 100 readings
  cal_ax = cal_ax/100;
  cal_ay = cal_ay/100;
  cal_az = cal_az/100;

  delay(1000);

  display.clearDisplay();
  display.println("Display calibrated!");
  display.print(cal_ax);
  display.print(",");
  display.print(cal_ay);
  display.print(",");
  display.print(cal_az);
  display.display();

}

void loop() {
  delay(1000);
}